/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
#define EVQ_SIZE 10

enum event
{
  ev_none = 0,
  ev_button_press = 1,
  ev_state_timeout = 2,
  ev_error = -99
};

enum state
{
  s_cars_go = 0,
  s_pushed_wait,
  s_cars_stopping,
  s_init,
  s_cars_stopped,
  s_pedestrian_walk,
  s_pedestrian_stop,
  s_cars_ready
};

uint32_t ticks_left_in_state = 0;

enum event evq[ EVQ_SIZE ];

int evq_count = 0;
int evq_front_ix = 0;
int evq_rear_ix = 0;

void set_traffic_lights(enum state s);
int is_button_pressed();
void evq_push_back(enum event e);
enum event evq_pop_front();
void my_systick_handler();
void evq_init();
void my_systick_handler();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t systick_count = 0;
uint32_t curr_tick;
void my_systick_handler()
{

  curr_tick = HAL_GetTick();
  // Kontrollera om det är dags att generera en ev_state_timeout
  if (ticks_left_in_state == 0 && evq_pop_front() == ev_button_press) {
      evq_push_back(ev_state_timeout);
  }

  if (ticks_left_in_state != 0)
  {
	  ticks_left_in_state -= (curr_tick - systick_count);
  }
  
  systick_count++;
}

void evq_init() {
  for (int i = 0; i < EVQ_SIZE; i++) {
    evq[i] = ev_error;
  }
}

void evq_push_back(enum event e)
{
  // if queue is full, ignore e
  if ( evq_count < EVQ_SIZE )
  {
    evq[evq_rear_ix] = e;
    evq_rear_ix++;
    evq_rear_ix %= EVQ_SIZE;
    evq_count++;
  }
}

enum event evq_pop_front()
{
  enum event e = ev_none;
  if ( evq_count > 0 )
  {
    e = evq[evq_front_ix];
    evq[evq_front_ix] = ev_error; // detect stupidity
    evq_front_ix++;
    evq_front_ix %= EVQ_SIZE;
    evq_count--;
  }
  return e;
}

// returns 1 if blue button is pressed
// return 0 if blue button isn't pressed
int is_button_pressed() {

	if ((GPIOC->IDR & GPIO_PIN_13) == 0) {
		return 1; // button is pressed
	}
	else
	{
		return 0; // button is not pressed
	}
}

void set_traffic_lights(enum state s) {
  switch (s) {
    // OBS: Alla PINNAR ligger på PORT C, alltså GPIOC, använder pipe:ning s_init
    case s_cars_go:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_SET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_RESET);
      break;

    case s_pushed_wait:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_SET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_RESET);
      break;

    case s_cars_stopping:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_RESET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_RESET);
      break;

    case s_init:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin | YELLOW_CAR_Pin | GREEN_CAR_Pin
                        | RED_WALK_Pin | GREEN_WALK_Pin, GPIO_PIN_SET);
      break;

    case s_cars_stopped:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_RESET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_RESET);
      break;

    case s_pedestrian_walk:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_RESET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_SET);
      break;

    case s_pedestrian_stop:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_RESET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_RESET);
      break;

    case s_cars_ready:
      HAL_GPIO_WritePin(RED_CAR_GPIO_Port, RED_CAR_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(YELLOW_CAR_GPIO_Port, YELLOW_CAR_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_CAR_GPIO_Port, GREEN_CAR_Pin, GPIO_PIN_RESET);

      HAL_GPIO_WritePin(RED_WALK_GPIO_Port, RED_WALK_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GREEN_WALK_GPIO_Port, GREEN_WALK_Pin, GPIO_PIN_RESET);
      break;

    default:

      break;
  }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  enum state current_state = s_init;
  evq_init();

  while (1)
  {
    // Hantera nästa tillstånd baserat på nuvarande tillstånd och händelse
    switch (current_state) {
        case s_init:
            // Hantera händelser i s_init-tillståndet
            if (evq_pop_front() == ev_button_press) {
                // Gå till nästa tillstånd
                current_state = s_cars_stopped;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 3000;
            }
            else
            {
                set_traffic_lights(current_state);
            }
            break;

        case s_cars_stopping:
            // Hantera händelser i s_cars_stopping-tillståndet
            if (evq_pop_front() == ev_state_timeout) {
                // Gå till nästa tillstånd
                current_state = s_cars_stopped;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 3000;
            }
            break;

        case s_cars_stopped:
            // Hantera händelser i s_cars_stopped-tillståndet
            if (evq_pop_front() == ev_state_timeout) {
                // Gå till nästa tillstånd
                current_state = s_pedestrian_walk;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 5000;
            }
            break;

        case s_pedestrian_walk:
            // Hantera händelser i s_pedestrian_walk-tillståndet
            if (evq_pop_front() == ev_state_timeout) {
                // Gå till nästa tillstånd
                current_state = s_pedestrian_stop;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 3000;
            }
            break;

        case s_pedestrian_stop:
            // Hantera händelser i s_pedestrian_stop-tillståndet
            if (evq_pop_front() == ev_state_timeout) {
                // Gå till nästa tillstånd
                current_state = s_cars_ready;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 2000;
            }
            break;

        case s_cars_ready:
            // Hantera händelser i s_cars_ready-tillståndet
            if (evq_pop_front() == ev_state_timeout) {
                // Gå till nästa tillstånd
                current_state = s_cars_go;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 0;
            }
            break;

        case s_cars_go:
            // Hantera händelser i s_cars_go-tillståndet
            if (evq_pop_front() == ev_button_press) {
                // Gå till nästa tillstånd
                current_state = s_pushed_wait;
                set_traffic_lights(current_state);
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 2000;
            }
            else
            {
                set_traffic_lights(current_state);
            }
            break;

        case s_pushed_wait:
            // Hantera händelser i s_pushed_wait-tillståndet
            if (evq_pop_front() == ev_state_timeout) {
                // Gå till nästa tillstånd
                current_state = s_cars_stopping;
                // Sätt timeout för nästa tillstånd
                ticks_left_in_state = 1000;
                set_traffic_lights(current_state);
            }
            break;
    }

    HAL_Delay(1);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RED_CAR_Pin|YELLOW_CAR_Pin|GREEN_CAR_Pin|RED_WALK_Pin
                          |GREEN_WALK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RED_CAR_Pin YELLOW_CAR_Pin GREEN_CAR_Pin RED_WALK_Pin
                           GREEN_WALK_Pin */
  GPIO_InitStruct.Pin = RED_CAR_Pin|YELLOW_CAR_Pin|GREEN_CAR_Pin|RED_WALK_Pin
                          |GREEN_WALK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
    evq_push_back(ev_button_press);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
