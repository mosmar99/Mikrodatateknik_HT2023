#include "lcd.h"

// first:   D7 D6 D5 D4 BT E  RW RS
// second:  D3 D2 D1 D0 BT E  RW RS


/*
 * my = mu = micro
 * Holds for an amount of microseconds.
 */
void My_Delay(uint32_t mysec)
{
	HAL_Delay( 1 + (mysec / 1000) );
	// 1. Stoppa timern.
	// 2. Nollställ räknaren.
	// 3. Starta timern.
	// 4. Vänta tills räknaren nätt upp till fördröjningstiden.

    // 1. Stoppa timern.
    TIM2->CR1 &= ~TIM_CR1_CEN; // Återställ CEN (Counter Enable) till 0

    // 2. Nollställ räknaren.
    TIM2->CNT = 0; // Återställ räknaren till 0

    // 3. Starta timern.
    TIM2->CR1 |= TIM_CR1_CEN; // Aktivera räknaren igen

    // 4. Vänta tills räknaren når fördröjningstiden.
    while (TIM2->CNT < mysec) {
        // Vänta
    }

    // Stoppa timern igen om det behövs
    TIM2->CR1 &= ~TIM_CR1_CEN; // Återställ CEN till 0 för att stoppa räknaren
}

#define BIT_BT   0x08
#define BIT_E    0x04    // 0000 0100 == 0x08
#define BIT_RW   0x02
#define BIT_RS   0x01

#define INV_BT  ~BIT_BT
#define INV_E   ~BIT_E   // 1111 1011 == 0xFB
#define INV_RW  ~BIT_RW
#define INV_RS  ~BIT_RS

// Back light flag, is sent every command
GPIO_PinState BT = GPIO_PIN_SET;

// Always be writing! (can't really read from the device)
GPIO_PinState RW = GPIO_PIN_RESET;

/***************************************************************************
 *  Nibble should be in the MSB part as the lower four will be control.
 *
 * So the bits are
 *
 *  MSB b7   b6   b5   b4   b3   b2   b1   b0  LSB
 *
 *      D3   D2   D1   D0   BT    E   RW   RS
 *
 *  When sending a byte, use this twice, sending D7-D4 the first time
 *  and D3-D0 the second time.
 ****************************************************************************/
void TextLCD_SendNibbleWithPulseOnE(TextLCDType * hlcd, uint8_t data)
{
	/***** Put nibble when E is low *****/
	data = data & INV_E;
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
	My_Delay(2000);

	/***** Now set E to high *****/
	data = data | BIT_E;
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
	My_Delay(2000);

	/***** Then go low again *****/
	data = data & INV_E;
	HAL_I2C_Master_Transmit(hlcd->hi2c, hlcd->device_address, &data, 1, 1000);
}


void TextLCD_SendByte(
		TextLCDType   * hlcd,
		uint8_t         data,
		GPIO_PinState   RS)
{
	// Place the data bits in the top four bits. The lowest four will
	// be for control.
	uint8_t d_lo = (data & 0x0F) << 4;
	uint8_t d_hi = (data & 0xF0);

	// Set the control bits for the message.
	uint8_t ctrl = 0x00;
	ctrl = (BT == GPIO_PIN_SET) ? (ctrl | BIT_BT) : (ctrl & INV_BT);
	ctrl = (RS == GPIO_PIN_SET) ? (ctrl | BIT_RS) : (ctrl & INV_RS);
	ctrl = (RW == GPIO_PIN_SET) ? (ctrl | BIT_RW) : (ctrl & INV_RW);

	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_hi | ctrl) );
	TextLCD_SendNibbleWithPulseOnE( hlcd, (d_lo | ctrl) );
}



void TextLCD_Init(
		TextLCDType         *   hlcd,
		I2C_HandleTypeDef   *   hi2c,
		uint8_t                 device_address)
{
	uint32_t dly = 5 * 1000 * 1000; // 5 seconds
	My_Delay(dly);

	hlcd->hi2c           = hi2c;
	hlcd->device_address = device_address;

	uint8_t data = 0x30; // b# 0011 1000
	uint8_t ctrl = 0x08;

	My_Delay(70000);

	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );

	data = 0x20;
	TextLCD_SendNibbleWithPulseOnE(hlcd, (data|ctrl) );

	// Finished setting up 4-bit mode. Let's configure display

	// hlcd, data, rs, rw
	TextLCD_SendByte(hlcd, 0x28, 0); //N=1 (2 line), F=0 (5x8)

	TextLCD_SendByte(hlcd, 0x0F, 0); //Display off, Cursor Off, Blink off
	TextLCD_SendByte(hlcd, 0x01, 0);
	My_Delay(5000);

	TextLCD_SendByte(hlcd, 0x06, 0);
	TextLCD_SendByte(hlcd, 0x0C, 0);
}


void TextLCD_SetBacklightFlag(GPIO_PinState bt)
{
	BT = bt;
}

void TextLCD_Clear (TextLCDType * hlcd)
{
    // Command to clear the display
    uint8_t command = 0x01; // 00000001 in binary

    // Set RS (Register Select) to 0 for command mode
    GPIO_PinState RS = GPIO_PIN_RESET;

    // Send the clear command to the LCD
    TextLCD_SendByte(hlcd, command, RS);
}

void TextLCD_Home (TextLCDType * hlcd)
{
    // Command to set DDRAM address to 0 and return the display to the original position
    uint8_t command = 0x02; // 00000010 in binary

    // Set RS (Register Select) to 0 for command mode
    GPIO_PinState RS = GPIO_PIN_RESET;

    // Send the command to the LCD
    TextLCD_SendByte(hlcd, command, RS);

    HAL_Delay(1);
}

void TextLCD_SetDDRAMAdr (TextLCDType * hlcd, uint8_t adr)
{
    // Ensure that the DDRAM address is within valid bounds
    if (adr < 0x00) adr = 0x00; // Minimum address
    if (adr > 0x27) adr = 0x27; // Maximum address for the first line

    // For the second line, add 0x40 to the address
    if (adr >= 0x40 && adr <= 0x67) adr = adr - 0x40 + 0x80;

    // Set RS (Register Select) to 0 for command mode
    GPIO_PinState RS = GPIO_PIN_RESET;

    // Send the command to set the DDRAM address
    TextLCD_SendByte(hlcd, (0x80 | adr), RS);
}


void TextLCD_SetPos (TextLCDType * hlcd, int row, int col)
{
    // Define the DDRAM addresses for the four rows of a 16x2 LCD
    const uint8_t row_offsets[] = {0x00, 0x40, 0x10, 0x50};

    // Ensure the row and column values are within valid bounds
    if (row < 0) row = 0;
    if (row >= 2) row = 1; // Assuming 0-based index for rows
    if (col < 0) col = 0;
    if (col >= 16) col = 15; // Assuming 0-based index for columns

    // Set the DDRAM address for the specified row and column
    uint8_t command = 0x80 | (row_offsets[row] + col);

    // Set RS (Register Select) to 0 for command mode
    GPIO_PinState RS = GPIO_PIN_RESET;

    // Send the command to set the cursor position
    TextLCD_SendByte(hlcd, command, RS);
}

void TextLCD_PutChar (TextLCDType * hlcd, char c)
{
    // Set RS (Register Select) to 1 for data mode
    GPIO_PinState RS = GPIO_PIN_SET;

    // Convert the character to its ASCII value (8-bit data)
    uint8_t data = (uint8_t)c;

    // Send the character to the LCD
    TextLCD_SendByte(hlcd, data, RS);
}


void TextLCD_PutStr (TextLCDType * hlcd, char * str)
{
    while (*str != '\0') {
        // Display the current character on the LCD
        TextLCD_PutChar(hlcd, *str);

        // Move to the next character in the string
        str++;
    }
}

#if 0
void TextLCD_Printf(TextLCDType *lcd, char *message, ...)
{

}
#endif

